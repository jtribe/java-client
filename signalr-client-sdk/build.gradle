apply plugin: 'java'

sourceCompatibility = rootProject.ext.sourceCompatibility
targetCompatibility = rootProject.ext.sourceCompatibility

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'http://clojars.org/repo'
    }
}

dependencies {
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.java-websocket:java-websocket:1.3.1'
}

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def siteUrl = 'https://github.com/SignalR/java-client'
def issueUrl = 'https://github.com/SignalR/java-client/issues'
def gitUrl = 'https://github.com/jtribe/java-client.git'

group = 'au.com.jtribe'
version = '1.0.0'

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('bintray.properties').newDataInputStream())

    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ["archives"]
    pkg {
        repo = 'maven'
        name = 'signalr-client-sdk'
        desc = 'Java SignalR Client'
        websiteUrl = siteUrl
        issueTrackerUrl = issueUrl
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        labels = []
        publicDownloadNumbers = true
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'signalr-client-sdk'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'beamishjabberwock'
                        name 'Angus Morton'
                        email 'angus@jtribe.com.au'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}